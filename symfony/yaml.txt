Небольшой список основных элементов YAML:

потоки YAML используют печатаемые Unicode-символы, как UTF-8, так и UTF-16
отступы из пробелов (символы табуляции не допускаются) используются для обозначения структуры
комментарии начинаются с символа “решетка” ( # ), могут начинаться в любом месте строки и продолжаются до конца строки
списки обозначаются начальным дефисом ( - ) с одним членом списка на строку, либо члены списка заключаются в квадратные скобки ( [ ] ) и разделяются запятой и пробелом ( , )
ассоциативные массивы представлены двоеточием с пробелом ( : ) в виде ключ: значение, по одной паре ключ-значение на строку, либо в виде пар, заключённых в фигурные скобки и разделенных запятой и пробелом ( , )
ключ в ассоциативном массиве может иметь в качестве префикса вопросительный знак ( ? ), что позволяет указать сложный ключ, например представленный в виде списка
строки записываются без кавычек, однако могут быть заключены в одиночные или двойные кавычки
внутри двойных кавычек могут быть использованы экранированные символы в C-стиле, начинающиеся с обратного слэша ( \ )
YAML позволяет задавать подстановки с помощью якорей & и алиасов (*). Пример

aliases:  #последовательность настроек
 - &myAlias1
   datakey: dataval 1
   moredata: morevals 1
 - &myAlias2
   datakey: dataval 2
   moredata: morevals 2
config:
 - *myAlias1  # *myAlias1 после парсинга будет заменен на [{"datakey": "dataval 1", "moredata": "morevals 1"}]
явное задание типа оформляется путем '!![указание типа]'. Пример, !!str 100 после парсинга выдаст значение "100".
значения типа Дата/Время задаются в формате YYYY-MM-DD или YYYY-MM-DD HH:MM:SS. Если необходимо задать дату, как строку, нужно заключать её в кавычки ("2012-12-21")




Синтаксис YAML и cоглашения (сonventions) symfony

Для конфигурации symfony по умолчанию использует YAML файлы, вместо более традиционных форматов INI или XML. YAML файлы отображают структуру данных с помощью отступов, и их очень быстро писать. Достоинства YAML уже были описаны в главе 1. Тем не менее, при написании YAML файла, необходимо помнить о ряде соглашений. Эта секция познакомит вас с главными договоренностями. Полностью эта тема освещается на сайте YAML (http://www.yaml.org/).

Прежде всего, никогда не используйте табуляцию (tab); пользоваться нужно пробелами. Парсеры (parser) YAML не обрабатывают файлы с табуляций, поэтому отступы следует создавать пробелами (согласно договоренностям symfony, для отступа используется два пробела), как продемонстрировано в листинге 5-1.

Листинг 5-1 - В YAML файлах запрещена табуляция

# Никогда не используйте tab
all:
-> mail:
-> -> webmaster:  webmaster@example.com

# Используйте пробелы
all:
  mail:
    webmaster: webmaster@example.com
Если параметр это строка, которая начинается или заканчивается пробелом, заключите значение в одинарные кавычки. Если параметр — строка, содержащая специальные символы, ее также следует заключить в одинарные кавычки, как показано в листинге 5-2.

Листинг 5-2 - Нестандартные строки должны быть заключены в одинарные кавычки

error1: This field is compulsory
error2: '  This field is compulsory  '
error3: 'Don''t leave this field blank'   # Одинарные кавычки продублированы
Если значение параметра длинное, его можно задать в нескольких строках, также значением может быть мультистрока, состоящая из нескольких строчек (multiple-line string). В таких случаях используются дополнительные отступы и специальные метки (> и |). Пример приведен в листинге 5-3.

Листинг 5-3 - Определение длинной строки и мультистроки (multiple-line)

# Разбивая длинное значение, используйте метку >
# Каждая новая линия имеет дополнительный отступ
# Это делает YAML более читаемым
accomplishment: >
  Mark set a major league
  home run record in 1998.

# Для мультистрок используется метка |
# Все переносы строк сохранятся
# Дополнительных отступов в результирующей строке не будет
stats: |
  65 Home Runs
  0.278 Batting Average
Чтоб задать в качестве значения массив, нужно заключить элементы в квадратные скобки, или же использовать расширенный синтаксис с дефисом (dash), как показано в листинге 5-4.

Листинг 5-4 - YAML, Определение массива

# Короткий синтаксис для массивов
players: [ Mark McGwire, Sammy Sosa, Ken Griffey ]

# Расширенный синтаксис для массивов
players:
  - Mark McGwire
  - Sammy Sosa
  - Ken Griffey
Чтоб определить ассоциативный массив, или хэш, заключите элементы в фигурные скобки. Всегда ставьте пробел между ключом и значением в паре ключ: значение (key: value). Можно использовать расширенный синтаксис и описать массив с помощью отступов, переходя на следующую строку после каждого элемента. Пример приведен в листинге 5-5.

Листинг 5-5 - YAML, определение ассоциативного массива

# Здесь есть ошибка, пропущены пробелы после двоеточий
mail: {webmaster:webmaster@example.com,contact:contact@example.com}

# Короткий синтаксис для ассоциативных массивов
mail: { webmaster: webmaster@example.com, contact: contact@example.com }

# Расширенный синтаксис для ассоциативных массивов
mail:
  webmaster: webmaster@example.com
  contact:   contact@example.com
Для булевых параметров используйте on, 1, или true, в случае позитивного значения, и off, 0, или false, в случае отрицательного. Листинг 5-6 содержит пример с булевыми параметрами.

Листинг 5-6 – YAML, булевые значения

true_values:   [ on, 1, true ]
false_values:  [ off, 0, false ]
Чтоб сделать YAML файл более читаемым не стесняйтесь добавлять комментарии (строки с пометкой #) и дополнительные пробелы, как например в листинге 5-7.

Листинг 5-7 - YAML, комментарии и выравнивание

# Это закомментированная строка
mail:
  webmaster: webmaster@example.com
  contact:   contact@example.com
  admin:     admin@example.com   # Дополнительные пробелы красиво выравнивают значения
В некоторых конфигурационных файлах symfony, вы иногда будете видеть строки, которые начинаются с символа # (и соответственно, игнорируемые парсером YAML), но которые выглядят как обычные настройки. Это одна из договоренностей (convention) symfony: настройки по умолчанию, наследуемые из других, находящихся в ядре symfony YAML файлов, продублированы в закомментированных строках в конфигурации вашего приложения. Если вы хотите изменить значение параметра, сначала нужно раскомментировать строку, как показано в листинге 5-8.

Листинг 5-8 - Настройки по умолчанию закомментированы

# По умолчанию кэш отключен
settings:
# cache: off

# Если вы хотите изменить эту настройку, следует сначала раскомментировать строку
settings:
  cache: on
Symfony иногда группирует параметры в категории. Все настройки данной категории прописаны с отступом после заголовка категории. Размещение длинных списков пар ключ: значение (key: value) в категориях улучшает читаемость конфигурационных файлов. Заголовки категорий начинаются с точки (.). Листинг 5-9 содержит пример категории.

Листинг 5-9 - Заголовок категории, похож на ключ, но начинается с точки

all:
  .general:
    tax:        19.6

  mail:
    webmaster:  webmaster@example.com
В этом примере, mail это ключ, а general — название категории. Взгляните на листинг 5-10. Все работает точно также, как будто категории не существует. Параметр tax прямой потомок (direct child) ключа all.

Листинг 5-10 - Заголовки категорий нужны для повышения читаемости, и при обработке игнорируются

all:
  tax:          19.6

  mail:
    webmaster:  webmaster@example.com
SIDEBAR Если вы не любите YAML

YAML это просто интерфейс для управления настройками, которые будут использованы в PHP коде. Соответственно конфигурация, заданная в YAML файлах, в итоге трансформируется в PHP. После просмотра приложения, можно проверить кэшированные настройки (например, в cache/myapp/dev/config/). Вы увидите PHP файлы, соответствующие вашей YAML конфигурации. Вы узнайте больше о настройках кэша (cache) позже в этой главе.

Хорошая новость — если вы не хотите использовать YAML файлы, можете выполнять работу системы конфигурации самостоятельно, как и прежде писать настройки на PHP или в другом формате (XML, INT, и т. д.). В этой книге, вы найдете альтернативные способы задать опции, и в главе 19 даже научитесь тому, как заменить обработчики конфигурации (configuration handler) symfony. Если использовать их разумно, эти приемы позволят обойти конфигурационные файлы или задать ваш собственный формат настроек.

Помогите, YAML файл убил мое приложение!

YAML файлы обрабатываются и превращаются в PHP хэши и массивы, потом эти параметры используются во многих частях приложения, чтоб изменить поведение view, controller, или model. Часто, если в YAML файле что-то не так, это не обнаруживается вплоть до того момента, когда понадобится использовать значение. Более того, ошибка или исключение (exception), которые выводятся, обычно неочевидным образом связано с YAML файлом.

Если ваше приложение неожиданно перестало работать после изменения настроек, нужно проверить, не сделали ли вы какую-то из распространенных ошибок:

Вы пропустили пробел между ключем (key) и значением (value):

key1:value1      # Пропущен пробел после двоеточия
Ключи в последовательности имеют разный отступ:

all:
  key1:  value1
   key2: value2  # Тут отступ не такой же как у других параметров
  key3:  value3
Наличие зарезервированного символа YAML в ключе или значении, не заключенном в кавычки:

message: tell him: go way    # :, [, ], { и } в YAML зарезервированы
message: 'tell him: go way'  # корректный синтаксис
Вы изменили закомментированную строку

# key: value     # Это опция не обрабатывается, так как в начале строки стоит символ `#`
Вы повторно задали значение для одного ключа на одном уровне:

key1: value1
key2: value2
key1: value3     # ключ key1 задан дважды, и будет равен последнему значению
Вы подразумевайте, что значение будет иметь какой либо специальный тип. На самом деле это всегда строка, и вам нужно ее конвертировать:

income: 12,345   # пока вы не конвертируйте этот параметр, его тип значения — строка.