
BackUP с помощью Rsync
07.08.2010, 20:13

Перед отпуском решил сделать бэкап всего,что лежит важного на серваках и в случае какого-нить WTF можно будет безболезненно восстановить конфиги и файло. Бэкап хотелось чтобы делался по расписанию с нескольких серверов по сети на один сервер,где под это дело выделен отдельный хард.
Сервер, с которого нужно бэкапить данные будет иметь адрес 192.168.1.1,
а сервер, на который мы будем всё это дело сохранять будет иметь адрес 192.168.1.10


Итак, схема такова:

Есть сервак, на который будем сливать сами бэкапы.
И есть несколько серваков в сети, с которых мы будем сливать эти бэкапы.




***************************************************************************************
Ставим Rsync на сервера, с которых будем бэкапить.

# cd /usr/ports/net/rsync/
# make install clean
# rehash
Опции выставляем на свой вкус и цвет,жмем ОК и ждем пока установится. После установки идем править конфиг rsync.

# less /usr/local/etc/rsyncd.conf


pid file = /var/run/rsyncd.pid    #pid file Параметр "pid file" указывает rsync-демону файл, куда он должен записать id своего процесса.
log file = /var/log/rsyncd.log		# Сюда пишем логи

[etc]  #Тут описываем каталоги, которые будем бэкапить
        path = /etc/					# путь откуда брать
        uid = root						# Параметр "uid" указывает имя или id пользователя, от которого происходят прием и передача файлов для модуля, в случае если сам rsync-демон был запущен с правами супер-пользователя. В комбинации с параметром "gid" он определяет права доступа к файлам. По умолчанию соответствует пользователю "rsyncd".
        read only = yes					# только для чтения
        list = yes						# Параметр "list" определяет должен ли модуль присутствовать в списке доступных модулей, который запрашивают клиенты. Установкой этого параметра в false Вы можете создавать скрытые модули. По умолчанию модули открыты для просмотра в списке.
        comment = ETC directory			# Это коментарий к директории
        hosts allow = 192.168.1.10		# по умолчанию может отсутсвовать,  Параметр "hosts allow" позволяет Вам указать список шаблонов, на соответствие которым проверяются доменные имена и адреса IP клиентов. Если ни один из шаблонов не совпал, то соединение отвергается.
        auth users = backup				# Параметр "auth users" указывает разделенный запятыми и пробелами список имен пользователей, которым разрешено подключаться к этому модулю.
        secrets file = /usr/local/etc/rsyncd.scrt			# Параметр "secrets file" указывает имя файла, который содержит пары вида username:password и используемый для аутентификации подключений к этому модулю.
[ule]
        path = /usr/local/etc/
        uid = root
        read only = yes
        list = yes
        comment = /usr/local/etc directory
        hosts allow = 192.168.1.10
        auth users = backup
        secrets file = /usr/local/etc/rsyncd.scrt
[admins]
        path = /usr/local/admins/
        uid = root
        read only = yes
        list = yes
        comment = usr/local/admins directory
        hosts allow = 192.168.1.10
        auth users = backup
        secrets file = /usr/local/etc/rsyncd.scrt
[wiki]
       path = /usr/home/admin/backup/
        uid = root
        read only = yes
        list = yes
        comment = wiki_backup directory
        hosts allow = 192.168.1.10
        auth users = backup
        secrets file = /usr/local/etc/rsyncd.scrt
Теперь нужно создать необходимые файлы и установить на них владельцев и права:

# touch /var/log/rsyncd.log
# chmod 0600 /var/log/rsyncd.log
# chown root:wheel /var/log/rsyncd.log
Создаем файл,в котором будет храниться пароль для аутентификации пользователя:

# less  /usr/local/etc/rsyncd.scrt
backup:123456789
Устанваливаем на него владельца и права:

# chown root:wheel /usr/local/etc/rsyncd.scrt
# chmod 0600 /usr/local/etc/rsyncd.scrt
Добавляем в /etc/rc.conf строчку для старта rsync автоматом:

# echo 'rsyncd_enable="YES"' >> /etc/rc.conf
Стартуем Rsync

# /usr/local/etc/rc.d/rsyncd start
Starting rsyncd.


***********************************************************************
Теперь настроим сервер, на который мы будем бэкапить:
Установим сам Rsync:

# cd /usr/ports/net/rsync/
# make install clean
# rehash
Теперь проверим как всё работает:

# rsync 192.168.1.1::
etc             ETC directory
ule             /usr/local/etc directory
admins          usr/local/admins directory
wiki            wiki_backup directory
Для того, чтобы делать бэкап по крону, нужно запускать Rsync
с ключом —password-file, где в качестве аргумента укажем наш файл с паролем.
Создадим этот файл и установим владельца и права:

# less  /usr/local/etc/rsyncd.scrt
123456789
# chown root:wheel /usr/local/etc/rsyncd.scrt
# chmod 0600 /usr/local/etc/rsyncd.scrt
Плюс к тому же можно указывать и другие полезные ключи,например:


    * e — заменяет протокол с rsh на ssh

    * progress— вывод  хода процесса работы на терминал
    * l  —  пересоздание  symlinks,   это  значит,  что
символические ссылки будут так же переноситься

    * z — использовать сжатие
    * u — update. Обновление, он будет пропускать файлы,
которые новей, чем на удалённом сервере

    * o — установить владельца конечного файла таким же,
как и у исходного
    * g — установить  группу  конечного  файла таким же,
как и у исходного

    * t — передача времени модификации и его обновление
на  удаленной системе. Этот ключ должен быть установлен
для точной синхронизации
    * h — вывод информации на терминал в удобном
для чтения (human-readable) виде

    * v — verbose. Вывод сообщений в терминал.
    * r — рекурсивный режим

    * n — отладочный режим
    * compress-level — уровень сжатия

    * delete-after  —  удалять  файлы, которые не  были
найдены  на  удалённом сервере, “-after”  означает, что
удалить их нужно, только после окончания синхранизации.
Также есть delete-before, delete-during, delete-excluded
и просто delete
Теперь создадим директории, в которые будем сохранять бэкапы и ставим на них права:
# mkdir -p /backup/server1/{etc,usr-local-etc,usr-local-admins,wiki}
# chmod -R 0700 /backup/server1/
Теперь можем вручную запустить команду и посмотреть, что у нас получится:


# rsync --password-file=/usr/local/etc/rsyncd.scrt -lrzuogt --compress-level=9 --delete-after \
backup@192.168.1.1::etc /backup/server1/etc
Ну а дальше засовываем эти команды в шелл-скрипт,а скрипт в крон.
Проверяем и радуемся.