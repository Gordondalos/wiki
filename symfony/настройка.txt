Основные настройки приложения

Основные настройки приложения находятся в файлах директории myproject/apps/myapp/config/:

app.yml: Этот файл содержит настройки специфические для данного приложения; это глобальные переменные, используемые в бизнес логике и логике приложения, которые нет нужды хранить в базе данных. В этом файле часто хранятся налоговые ставки, цены на доставку, e-mail адреса. По умолчанию он пустой.
config.php: Этот файл отвечает за начальную загрузку приложения, это означает, что в нем происходят все основные инициализации необходимые для начала работы приложения. Тут вы можете изменять файловую структуру, или добавить специфические для данного приложения константы (Глава 19 предоставляет об этом более подробную информацию). В начале файла подключается (include) config.php проекта.
factories.yml: Symfony предоставляет свои собственные классы для обработки view, запроса (request), ответа (response), сессии (session), и т. д. Если вы желаете использовать свои собственные классы, то нужно определить их в этом файле. Глава 19 рассматривает эту возможность подробнее.
filters.yml: Фильтры это куски кода, выполняемые при каждом запросе (request). В этом файле можно задать какие фильтры необходимо использовать. Эти настройки могут быть перезаданы на уровне модуля. Глава 6 детально рассматривает фильтры.
logging.yml: В этом файле можно задать уровень детализации для журналов событий (log), чтоб облегчить управление приложением и отладку. Использование этой возможности рассмотрено в главе 16.
routing.yml: Здесь хранятся правила роутинга, благодаря которым обеспечивается трансформация нечитаемых и неудобных для добавления в закладки (unbookmarkable) URL в говорящие сами за себя ЧПУ(человеко-понятные-урл) адреса. В новом приложении по умолчанию существует несколько правил. Глава 9 целиком посвящена ссылкам и роутингу.
settings.yml: Основные настройки приложения symfony содержатся в этом файле. Тут вы можете задать многоязычно приложение или нет, язык используемый по умолчанию, время ожидания запроса (request timeout), включен ли кэш. Изменением одной строки вы можете прекратить работу приложения, чтоб заняться технической поддержкой или обновить (upgrade) какой-то компонент. Частоупотребляемые опции и их использование описано в главе 19.
view.yml: Структура view по умолчанию (имя главного шаблона (layout), заголовок (title), теги meta; стандартные таблицы стилей и подключаемые яваскрипты; тип контента по умолчанию, и т. д.) задаются в этом файле. Тут также определяются значения по умолчанию для тегов title и meta. Глава 7 расскажет больше об этом файле. Эти установки могут быть перезаданы для каждого модуля.






Дополнительные настройки приложения

Еще один набор конфигурационных файлов находится в установочной директории symfony ($sf_symfony_data_dir/config/). Находящейся в них опции либо определены по умолчанию, и потребность изменять их возникает редко, либо общие для всех проектов. Однако, если вы пожелайте изменить эти настройки, просто создайте пустой файл с таким же именем в вашей директории myproject/apps/myapp/config/ и перезадайте в нем нужные опции. Заданные на уровне приложения настройки имеют больший приоритет, чем настройки определенные в фреймворке. Вот список конфигурационных файлов директории config/ фреймворка:

autoload.yml: Файл содержит опции автоподключения. Эта возможность позволит не подключать пользовательские классы в вашем коде, если они находятся в специальных директориях. Детальней — в главе 19.
constants.php: Этот файл задает файловую структуру приложения по умолчанию. Чтоб перезадать ее, используйте config.php приложения, как объясняется в главе 19.
core_compile.yml и bootstrap_compile.yml: Это списки классов, которые нужно подключить для запуска приложения (bootstrap_compile.yml) и для обработки запроса (core_compile.yml). В действительности, эти файлы объединены в один оптимизированный PHP файл без комментариев, который ускоряет работу, минимизируя количество операций доступа к файлу (для обработки одного запроса загружается один файл вместо более чем 40). Это в особенности удобно, если вы не используйте PHP акселератор. Методы оптимизации описываются в главе 18.
PHP акселератор это расширение (extension) призванное увеличить быстродействие приложений написанных на PHP. Основная идея PHP акселератора — бинарный код PHP скриптов кэшируется и используется в дальнейшей работе приложения. 
переводчик

config_handlers.yml: Тут вы можете поменять обработчик (handler) для каждого конфигурационного файла. Глава 19 описывает эту возможность подробнее
php.yml: Этот файл проверяет правильно ли заданы переменные php.ini и также позволяет перезадать их, если это необходимо. Обратитесь к главе 19 за деталями.
Настройки модуля

По умолчанию модуль не имеет собственных настроек. Но, если возникнет необходимость, вы можете перезадать некоторые опции приложения для данного модуля. К примеру, можно переопределить параметры используемые в HTML только для всех действий (action) данного модуля, или подключить какой-то специфический яваскрипт. Вы также можете задать новые параметры, доступные только в данном модуле, таким образом обеспечив инкапсуляцию.

Как вы уже наверное догадались, настройки модуля содержатся в директории myproject/apps/myapp/modules/mymodule/config/. Вот список файлов:

generator.yml: Этот файл нужен для сгенерированных на основе таблицы базы данных модулей (scaffoldings и админинтерфесы; scaffolding — (англ.) строительные леса). Тут определяется, как будут отображаться строки и поля, какие действия будут доступны пользователю (фильтры, сортировка, кнопки, и т. д.). Глава 14 расскажет больше.
module.yml: Тут содержатся пользовательские параметры индивидуальные для данного модуля (эквивалент app.yml, но на уровне модуля) и некоторые настройки действия (action). В главе 6 предоставлено больше информации.
security.yml: Файл определяет ограничения доступа. Тут можно разрешить доступ к модулю только для зарегистрированных пользователей или для какой-то подгруппы зарегистрированных пользователей, имеющих специальные права. Глава 6 рассматривает эту тему подробно.
view.yml: Настройки view хранятся здесь. Они могут быть заданы как для всех действий (action), так и индивидуально для каждого. Как обычно, эти опции имеют больший приоритет, чем опции заданные во view.yml приложения. Обратитесь к главе 7 за деталями.
Файлы валидации данных: Несмотря на то, что они находятся в директории validate/, а не в config/, это тоже часть конфигурации модуля. Эти файлы используются для контроля над вводимыми через формы данными. Вы узнаете больше об их использовании в главе 10.
Большинство конфигурационных файлов модуля предоставляют возможность определить параметры для всех действий (action) и view модуля, или для какого-то их подмножества.




Фактически, в symfony есть несколько уровней конфигурации:

Уровни в глубину
Стандартные настройки находящийся в фреймворке
Глобальная конфигурация всего проекта (в myproject/config/)
Конфигурация приложения проекта (в myproject/apps/myapp/config/)
Локальная конфигурация модуля (в myproject/apps/myapp/modules/mymodule/config/)
Уровни режимов:
Индивидуальные настройки для режима
Настройки общие для всех режимов
Большая часть опций могут быть разными для разных режимов. Многие конфигурационные YAML файлы поделены на несколько секций. Каждая секция соответствует какому-то режиму, и еще в одной секции содержатся настройки общие для всех режимов. Типичный конфигурационный файл symfony выглядит как показано в листинге 5-12.

Листинг 5-12 - Структура конфигурационных файлов symfony

# Опции рабочего режима (production environment)
prod:
  ...

# Опции режима разработки (development environment)
dev:
  ...

# Опции режима тестирования (test environment)
test:
  ...

# Опции заданного пользователем режима (custom environment)
myenv:
  ...

# Опции общие для всех режимов
all:
  ...
Так же, фреймворк задает стандартные значения настроек, они находятся не в файловой структуре проекта, а в директории фреймворка $sf_symfony_data_dir/config/. Эти опции наследуются всеми приложениями. Пример стандартной конфигурации приведен в листинге 5-13.

Листинг 5-13 - Стандартные настройки используемые по умолчанию в файле $sf_symfony_data_dir/config/settings.yml

 # Стандартные настройки:
 default:
   default_module:         default
   default_action:         index
   ...
Эти опции продублированы в настройках проекта, приложения и модуля. Но там они закомментированы, как показано в листинге 5-14. Таким образом понятно, что эти параметры заданы по умолчанию, но могут быть изменены.

Листинг 5-14 - Стандартные настройки продублированы в файле myapp/config/settings.yml

#all:
 #  default_module:         default
 #  default_action:         index
 ...
Это значит что опция может быть задана несколько раз, и результирующие значение будет получено из своеобразного каскада значений (definition cascade). Определение параметра в каком-то режиме имеет больший приоритет чем определение того же параметра для всех режимов, что в свою очередь имеет больший приоритет чем конфигурация по умолчанию. Определение параметра на уровне модуля имеет больший приоритет чем определение того же параметра на уровне приложения, что в свою очередь имеет больший приоритет чем определение того же параметра на уровне проекта. Это можно оформить в отсортированный по убыванию приоритета список:

Модуль (module)
Приложение (application)
Проект (project)
Конкретный режим (specific environment)
Все режимы (all environments)
Стандартная конфигурация (default)
Настройки кэша (cache)

Обработка YAML файлов и каскадов настроек может серьезно замедлить обработку каждого запроса. Для того чтоб ускорить работу приложения symfony предлагает встроенный механизм кэширования.

Независимо от формата, любые конфигурационные файлы обрабатывается специальными классами, называемыми обработчиками (handler), которые преобразовывают их в удобный для последующей работы PHP код. В режиме разработки обработчики проверяют, не изменилась ли конфигурация при каждом запросе. Заново обрабатываются файлы претерпевшие изменения. Таким образом, вы сразу же видите результат изменений в YAML файлах. Но в рабочем режиме (prod) обработка конфигурации происходит один раз при первом запросе, после этого полученный PHP код сохраняется в кэше для последующих запросов. Быстродействие гарантировано, поскольку каждый запрос в рабочем режиме просто выполняет некий, хорошо оптимизированный PHP код.

Например, если файл app.yml содержит это:

all:                   # Опции общие для всех режимов
  mail:
    webmaster:         webmaster@example.com
то файл config_app.yml.php, находящийся в директории cache/ вашего проекта, будет содержать это:

[php]
<?php

sfConfig::add(array(
  'app_mail_webmaster' => 'webmaster@example.com',
));
Как следствие, большую часть времени, YAML файлы не обрабатываются фреймворком, который вместо них использует кэш конфигурации. Однако, в режиме разработки (dev) symfony будет систематически сравнивать даты изменения в YAML файлах и файлах кэша, и обрабатывать только то, что изменилось с момента предыдущего запроса.

Это одно из основных преимуществ перед многими PHP фреймворками, в которых конфигурация обрабатывается при каждом запросе, даже на реальном сервере (production). В отличии от Java, PHP не делит контекст исполнения между запросами. Другие PHP фреймворки, используя гибкую конфигурацию основанную на XML, сильно теряют в быстродействии, обрабатывая настройки при каждом запросе. Но это не случай symfony. Благодаря системе кэша, задержка из-за обработки конфигурации очень мала.

Из всего этого следует один важный вывод. Если вы изменили настройки в рабочем режиме (prod), то для того чтобы изменения вступили в силу необходимо заново обработать конфигурационные файлы. Для этого нужно просто очистить кэш удалив все содержимое папки cache/ или, еще проще, вызвав команду symfony clear-cache:

> symfony clear-cache
Доступ к конфигурации из кода

Все конфигурационные файлы трансформированы в PHP, и многие настройки автоматически используются фреймворком без дальнейшего вмешательства. Однако, иногда вам может понадобиться получить значение опции из кода (в действии (action), шаблоне, пользовательском классе, и т. д.). Настройки заданные в файлах settings.yml, app.yml, module.yml, logging.yml, и i18n.yml доступны через специальный класс sfConfig.

Класс sfConfig

Вы можете получать значения опций через класс sfConfig. Это реестр конфигурационных параметров. Через методы типа getter, опции доступны из любой точки кода:

[php]
// Получение опции
parameter = sfConfig::get('param_name', $default_value);
Вы также можете задать или перезадать, опцию через PHP код:

[php]
// Задание опции
sfConfig::set('param_name', $value);
Имя параметра строится из нескольких частей, разделенных подчеркиванием и идущих в таком порядке:

Префикс, связанный с именем конфигурационного файла (sf_ для settings.yml, app_ для app.yml, mod_ для module.yml, sf_i18n_ для i18n.yml, и sf_logging_ для logging.yml)
Родительские ключи (если есть) в нижнем регистре
Имя ключа в нижнем регистре
Режим задавать не нужно, поскольку ваш PHP код будет иметь доступ только к значениям определенным для используемого в данный момент режима.

К примеру, листинг 5-16 показывает, как получить опции заданные в файле app.yml, приведенном в листинге 5-15.

Листинг 5-15 - Пример конфигурационного файла app.yml

all:
  version:        1.5
  .general:
    tax:          19.6
  default_user:
    name:         John Doe
  mail:
    webmaster:    webmaster@example.com
    contact:      contact@example.com
dev:
  mail:
    webmaster:    dummy@example.com
    contact:      dummy@example.com
Листинг 5-16 - Получение опций из PHP кода в режиме разработки (dev)

[php]
echo sfConfig::get('app_version');
 => '1.5'
echo sfConfig::get('app_tax');   // Помните, что заголовки категорий игнорируются
 => '19.6'
echo sfConfig::get('app_default_user_name');
 => 'John Doe'
echo sfConfig::get('app_mail_webmaster');
 => 'dummy@example.com'
echo sfConfig::get('app_mail_contact');
 => 'dummy@example.com'
Таким образом, все преимущества PHP констант присущи конфигурации symfony, но недостаток, связанный с тем что константу можно изменить — устранен.

Файл settings.yml, где вы задаете настройки для приложения, эквивалентен ряду вызовов метода sfConfig::set(). Листинг 5-18 показывает как обрабатывается листинг 5-17.

Листинг 5-17 - Выдержка из файла settings.yml

all:
  .settings:
    available:              on
    path_info_array:        SERVER
    path_info_key:          PATH_INFO
    url_format:             PATH
Листинг 5-18 - Вот что делает symfony, обрабатывая settings.yml.

[php]
sfConfig::add(array(
  'sf_available' => true,
  'sf_path_info_array' => 'SERVER',
  'sf_path_info_key' => 'PATH_INFO',
  'sf_url_format' => 'PATH',
));
Разъяснения по поводу опций из файла settings.yml содержатся в главе 19.

Пользовательские опции приложения и файл app.yml

Большинство опций связанных с возможностями вашего приложения должны храниться в файле app.yml, который находится в директории myproject/apps/myapp/config/. Этот файл зависит от используемого режима (environment-dependent) и по умолчанию пустой. Заносите сюда любую нужную опцию, и используйте класс sfConfig для доступа к параметру из кода. В листинге 5-19 содержится пример.

Листинг 5-19 - Пример app.yml, в котором задаются операторы кредитными карточками, приемлемые для данного сайта

all:
  creditcards:
    fake:             off
    visa:             on
    americanexpress:  on

dev:
  creditcards:
    fake:             on
Чтоб узнать принимают ли кредитные карточки fake в данном режиме (environment), получите соответствующие значение:

[php]
sfConfig::get('app_creditcards_fake');
TIP Прежде чем задать константу или опцию в одном из ваших скриптов подумайте, не лучше ли поместить ее в файл app.yml. Это очень удобное место для хранения всех опций приложения.

Если созданные вами параметры очень сложно задать чeрез синтаксис app.yml, можно создать ваш собственный синтаксис. В этом случае, можно хранить настройки в новом файле и обрабатывать его новым обработчиком конфигурации. Обратитесь к главе 19 за более подробной информацией об обработчиках.

Советы как получить больше пользы от конфигурационных файлов

Прежде чем писать собственные YAML файлы, осталось освоить последние несколько приемов. Они позволят не задавать два раза одни и те же опции и работать с вашими собственными форматами YAML.

Использование констант в конфигурационных файлах

Некоторые опции зависят от значений других опций. Чтоб избежать повторного задания параметра, symfony поддерживает константы в YAML файлах. При обнаружении имени опции (значение которой можно получить через sfConfig::get()), написанном в верхнем регистре и заключенном между символами %, обработчики настроек заменяют их на текущее значение. Посмотрите на пример в листинге 5-20.

Листинг 5-20 - Использование констант в YAML файлах, пример из autoload.yml

autoload:
  symfony:
    name:           symfony
    path:           %SF_SYMFONY_LIB_DIR%
    recursive:      on
    exclude:        [vendor]
Параметру path будет присвоено значение возвращенное sfConfig::get(‘sf_symfony_lib_dir’). Если вы хотите чтоб один конфигурационный файл зависел от другого, убедитесь, что второй файл уже обработан (взгляните на исходники symfony, чтоб узнать в каком порядке обрабатываются файлы). app.yml обрабатывается последним, поэтому в нем можно использовать все опции из других конфигурационных файлов.

Использование скриптов в настройках

Ваши настройки могут зависеть от каких либо внешних параметров (как база данных или другой конфигурационный файл). Для работы с такими случаями, конфигурационные файлы сначала обрабатывает PHP и только потом YAML парсер (parser). Это значит, что вы можете поместить PHP код в YAML файл, как сделано в листинге 5-21.

Листинг 5-21 - YAML файл может включать в себя PHP

all:
  translation:
    format:  <?php echo sfConfig::get('sf_i18n') == true ? 'xliff' : 'none' ?>
Помните что настройки обрабатываются в самом начале работы над запросом, поэтому вы не можете использовать помощь никаких встроенных методов или функций symfony.

CAUTION В рабочем режиме настройки кэшируются, соответственно конфигурационные файлы обрабатываются и выполняются один раз после очистки кэша.